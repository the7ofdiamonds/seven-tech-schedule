{"version":3,"file":"Schedule.js","sources":["../../node_modules/react-redux/es/hooks/useStore.js","../../node_modules/react-redux/es/hooks/useDispatch.js","../../src/views/components/NavigationLogin.jsx","../../src/views/Schedule.jsx"],"sourcesContent":["import { ReactReduxContext } from '../components/Context';\nimport { useReduxContext as useDefaultReduxContext, createReduxContextHook } from './useReduxContext';\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */\n\nexport function createStoreHook(context = ReactReduxContext) {\n  const useReduxContext = // @ts-ignore\n  context === ReactReduxContext ? useDefaultReduxContext : // @ts-ignore\n  createReduxContextHook(context);\n  return function useStore() {\n    const {\n      store\n    } = useReduxContext(); // @ts-ignore\n\n    return store;\n  };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */\n\nexport const useStore = /*#__PURE__*/createStoreHook();","import { ReactReduxContext } from '../components/Context';\nimport { useStore as useDefaultStore, createStoreHook } from './useStore';\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */\n\nexport function createDispatchHook(context = ReactReduxContext) {\n  const useStore = // @ts-ignore\n  context === ReactReduxContext ? useDefaultStore : createStoreHook(context);\n  return function useDispatch() {\n    const store = useStore(); // @ts-ignore\n\n    return store.dispatch;\n  };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */\n\nexport const useDispatch = /*#__PURE__*/createDispatchHook();","function NavigationLoginComponent() {\n  const baseHost = window.location.protocol + '//' + window.location.host;\n\n  const handleLogin = () => {\n    window.location.href = `/login/?redirectTo=${baseHost}/schedule/`;\n  };\n\n  const handleSignUp = () => {\n    window.location.href = `/signup/?redirectTo=${baseHost}/schedule/`;\n  };\n\n  const handleForgot = () => {\n    window.location.href = `/forgot/?redirectTo=${baseHost}/schedule/`;\n  };\n\n  return (\n    <>\n      <div className=\"options\">\n        <button onClick={handleLogin}>\n          <h3>LOGIN</h3>\n        </button>\n\n        <button onClick={handleSignUp}>\n          <h3>SIGN UP</h3>\n        </button>\n\n        <button onClick={handleForgot}>\n          <h3>FORGOT</h3>\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default NavigationLoginComponent;\n","import { useEffect, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getUser } from '../controllers/usersSlice';\nimport {\n  getAvailableTimes,\n  updateDate,\n  updateTime,\n  updateDueDate,\n  updateSummary,\n  updateEvent,\n  sendInvites,\n  updateDescription,\n  updateAttendees,\n  getOfficeHours,\n  getCommunicationPreferences,\n  updateCommunicationPreference,\n} from '../controllers/scheduleSlice.js';\nimport { formatOfficeHours, datesAvail, timesAvail } from '../utils/Schedule';\nimport NavigationLoginComponent from './components/NavigationLogin';\n\nfunction ScheduleComponent() {\n  const { id } = useParams();\n\n  const { user_email, user_id } = useSelector((state) => state.users);\n  const {\n    loading,\n    scheduleError,\n    events,\n    start_date,\n    start_time,\n    event_id,\n    event_date_time,\n    summary,\n    description,\n    attendees,\n    office_hours,\n    communication_preferences,\n  } = useSelector((state) => state.schedule);\n\n  const [officeHours, setOfficeHours] = useState('');\n  const [availableDates, setAvailableDates] = useState('');\n  const [availableTimes, setAvailableTimes] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [selectedTime, setSelectedTime] = useState('');\n  const [selectedSummary, setSelectedSummary] = useState('');\n  const [selectedDescription, setSelectedDescription] = useState('');\n  const [selectedCommunicationPreference, setCommunicationPreference] =\n    useState('');\n  const [selectedAttendees, setSelectedAttendees] = useState([user_email]);\n  const [showAdditionalAttendee, setShowAdditionalAttendee] = useState(false);\n  const [additionalAttendeeEmail, setAdditionalAttendeeEmail] = useState('');\n  const [messageType, setMessageType] = useState('info');\n  const [message, setMessage] = useState('Choose a date');\n\n  const dateSelectRef = useRef(null);\n  const timeSelectRef = useRef(null);\n  const summarySelectRef = useRef(null);\n  const descriptionSelectRef = useRef(null);\n  const communicationPreferenceSelectRef = useRef(null);\n  const attendeesSelectRef = useRef(null);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  // Office Hours\n  useEffect(() => {\n    dispatch(getOfficeHours());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (office_hours) {\n      setOfficeHours(formatOfficeHours(office_hours));\n    }\n  }, [office_hours]);\n\n  // Client info\n  useEffect(() => {\n    if (user_email) {\n      dispatch(getUser());\n    }\n  }, [user_email, dispatch]);\n\n  useEffect(() => {\n    if (!user_email) {\n      setMessageType('info');\n      setMessage('Login to schedule an appointment');\n    }\n  }, [user_email]);\n\n  // Events\n  useEffect(() => {\n    if (user_id) {\n      dispatch(getAvailableTimes());\n    }\n  }, [user_id, dispatch]);\n\n  useEffect(() => {\n    if (scheduleError) {\n      setMessageType('error');\n      setMessage(scheduleError);\n    }\n  }, [messageType, message]);\n\n  useEffect(() => {\n    if (events) {\n      setAvailableDates(datesAvail(events));\n    }\n  }, [events]);\n\n  useEffect(() => {\n    dateSelectRef.current = document.getElementById('date_select');\n    timeSelectRef.current = document.getElementById('time_select');\n    summarySelectRef.current = document.getElementById('summary_select');\n    descriptionSelectRef.current =\n      document.getElementById('description_select');\n    attendeesSelectRef.current = document.getElementById('description_select');\n  }, []);\n\n  useEffect(() => {\n    if (availableDates && availableDates.length > 0) {\n      setSelectedDate(availableDates[0]);\n      dispatch(updateDate(availableDates[0]));\n    }\n  }, [availableDates]);\n\n  useEffect(() => {\n    if (selectedDate && dateSelectRef.current) {\n      const key = dateSelectRef.current.value;\n      setAvailableTimes(timesAvail(events, key));\n    }\n  }, [selectedDate]);\n\n  useEffect(() => {\n    if (availableTimes) {\n      setSelectedTime(availableTimes[0]);\n      dispatch(updateTime(availableTimes[0]));\n    }\n  }, [availableTimes]);\n\n  const handleDateChange = (event) => {\n    if (dateSelectRef.current) {\n      setSelectedDate(event.target.value);\n      dispatch(updateDate(event.target.value));\n      setMessage('Choose a time');\n\n      if (dateSelectRef.current.value !== undefined) {\n        const key = dateSelectRef.current.value;\n\n        timesAvail(events, key);\n      } else {\n        console.error('selectedIndex is undefined');\n      }\n    }\n  };\n\n  const handleTimeChange = (event) => {\n    if (timeSelectRef.current) {\n      setSelectedTime(event.target.value);\n      dispatch(updateTime(event.target.value));\n      // dispatch(updateDueDate());\n      setMessage('Choose a topic');\n    }\n  };\n\n  useEffect(() => {\n    if (start_date && start_time) {\n      dispatch(updateEvent());\n    }\n  }, [start_date, start_time, dispatch]);\n\n  // Summary\n\n  const handleSummaryChange = (event) => {\n    if (summarySelectRef.current) {\n      setSelectedSummary(event.target.value);\n      dispatch(updateSummary(event.target.value));\n    }\n  };\n\n  // Description\n\n  useEffect(() => {\n    if (user_id) {\n      dispatch(getCommunicationPreferences());\n    }\n  }, [user_id, dispatch]);\n\n  useEffect(() => {\n    if (\n      summary &&\n      descriptionSelectRef.current &&\n      descriptionSelectRef.current.options.length > 0\n    ) {\n      setSelectedDescription(descriptionSelectRef.current.options[0].value);\n      dispatch(\n        updateDescription(descriptionSelectRef.current.options[0].value)\n      );\n    }\n  }, [summary, dispatch]);\n\n  useEffect(() => {\n    if (\n      summary &&\n      communicationPreferenceSelectRef.current &&\n      communicationPreferenceSelectRef.current.options.length > 0\n    ) {\n      setCommunicationPreference(\n        communicationPreferenceSelectRef.current.options[0].value\n      );\n      dispatch(\n        updateCommunicationPreference(\n          communicationPreferenceSelectRef.current.options[0].value\n        )\n      );\n    }\n  }, [summary, dispatch]);\n\n  const handleDescriptionChange = (event) => {\n    if (descriptionSelectRef.current) {\n      setSelectedDescription(event.target.value);\n      dispatch(updateDescription(event.target.value));\n      console.log(selectedDescription);\n    }\n  };\n\n  const handleCommunicationPreferenceChange = (event) => {\n    if (communicationPreferenceSelectRef.current) {\n      setCommunicationPreference(event.target.value);\n      dispatch(updateCommunicationPreference(event.target.value));\n    }\n  };\n\n  // Attendees\n  useEffect(() => {\n    if (summary !== '' && user_email) {\n      dispatch(updateAttendees(selectedAttendees));\n    }\n  }, [summary, dispatch]);\n\n  const handleAttendeeChange = () => {\n    if (additionalAttendeeEmail) {\n      const updatedAttendees = [user_email, additionalAttendeeEmail];\n      setAdditionalAttendeeEmail('');\n      dispatch(updateAttendees(updatedAttendees));\n    }\n  };\n\n  const handleAddAttendee = () => {\n    setShowAdditionalAttendee((prevState) => !prevState);\n  };\n\n  const handleRemoveAttendee = (index) => {\n    const updatedAttendees = selectedAttendees.filter((_, i) => i !== index);\n    setSelectedAttendees(updatedAttendees);\n    dispatch(updateAttendees(updatedAttendees));\n  };\n\n  const handleClick = () => {\n    if (event_date_time) {\n      dispatch(sendInvites());\n    }\n  };\n\n  const handleLogin = () => {\n    const baseHost = window.location.protocol + '//' + window.location.host;\n    window.location.href = `/login/?redirectTo=${baseHost}/schedule/`;\n  };\n\n  useEffect(() => {\n    if (event_id) {\n      window.location.href = '/dashboard';\n    }\n  }, [event_id]);\n\n  if (scheduleError) {\n    return (\n      <div className=\"status-bar card error\">\n        <span>{scheduleError}</span>\n      </div>\n    );\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <h2 className=\"title\">schedule</h2>\n\n      {officeHours && officeHours.length > 0 ? (\n        <div className=\"office-hours-card card\">\n          {officeHours.map((hours, index) => (\n            <span key={index}>\n              <h4 className=\"day\">{hours.dayofweek}</h4>\n              <h4>\n                {hours.start && hours.end\n                  ? `${hours.start} - ${hours.end}`\n                  : 'CLOSED'}\n              </h4>\n            </span>\n          ))}\n        </div>\n      ) : (\n        ''\n      )}\n\n      <div className=\"schedule\" id=\"schedule\">\n        <div className=\"schedule-select\">\n          {availableDates && availableDates.length > 0 ? (\n            <div className=\"date-select card\">\n              <label htmlFor=\"date\">Choose a Date</label>\n              <select\n                type=\"text\"\n                name=\"date\"\n                id=\"date_select\"\n                ref={dateSelectRef}\n                onChange={handleDateChange}\n                defaultValue={selectedDate}\n                min={new Date().toISOString().split('T')[0]}>\n                {availableDates.map((date, index) => (\n                  <option key={index} value={date}>\n                    {date}\n                  </option>\n                ))}\n              </select>\n            </div>\n          ) : (\n            ''\n          )}\n\n          {availableTimes && availableTimes.length > 0 ? (\n            <div className=\"time-select card\">\n              <label htmlFor=\"time\">Choose a Time</label>\n              <select\n                type=\"time\"\n                name=\"time\"\n                id=\"time_select\"\n                ref={timeSelectRef}\n                defaultValue={selectedTime}\n                onChange={handleTimeChange}>\n                {availableTimes.map((time, index) => (\n                  <option key={index} value={time}>\n                    {time}\n                  </option>\n                ))}\n              </select>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n      </div>\n\n      {communication_preferences && communication_preferences.length > 0 ? (\n        <div className=\"communication-select card\">\n          <label htmlFor=\"summary\">Preferred Communication Type</label>\n          <select\n            type=\"text\"\n            name=\"preferred_communication_type\"\n            id=\"communication_select\"\n            ref={communicationPreferenceSelectRef}\n            onChange={handleCommunicationPreferenceChange}\n            defaultValue={selectedCommunicationPreference}>\n            {communication_preferences.map((communication, index) => (\n              <option key={index} value={communication.type}>\n                {communication.type}\n              </option>\n            ))}\n          </select>\n        </div>\n      ) : (\n        ''\n      )}\n\n      {/* {attendees && attendees.length > 0 ? (\n        <div className=\"attendees-select card\">\n          <label htmlFor=\"attendees\">Attendees</label>\n          {attendees.map((attendee, index) => (\n            <div className=\"attendee\">\n              <h4 key={index}>{attendee}</h4>\n              <button\n                className=\"remove-attendee\"\n                onClick={handleRemoveAttendee}>\n                <h4>-</h4>\n              </button>\n              <button onClick={handleAddAttendee}>\n                <h4>+</h4>\n              </button>\n            </div>\n          ))}\n        </div>\n      ) : (\n        ''\n      )} */}\n\n      {/* <div\n        className={`additional-attendee card ${\n          showAdditionalAttendee ? 'view' : ''\n        }`}\n        id=\"additional_attendee\">\n        <label htmlFor=\"attendees\">Additional Attendee</label>\n        <div className=\"attendee\">\n          <input\n            type=\"email\"\n            value={additionalAttendeeEmail}\n            onChange={(event) => setAdditionalAttendeeEmail(event.target.value)}\n          />\n          <button className=\"add-attendee\" onClick={handleAttendeeChange}>\n            <h4>+</h4>\n          </button>\n        </div>\n      </div> */}\n\n      {message ? (\n        <div className={`status-bar card ${messageType}`}>\n          <span>{message}</span>\n        </div>\n      ) : (\n        ''\n      )}\n\n      {user_email ? (\n        <button onClick={handleClick}>\n          <h3>SCHEDULE</h3>\n        </button>\n      ) : (\n        <NavigationLoginComponent />\n      )}\n    </>\n  );\n}\n\nexport default ScheduleComponent;\n"],"names":["createStoreHook","context","arguments","length","undefined","ReactReduxContext","useReduxContext","useDefaultReduxContext","createReduxContextHook","_useReduxContext","store","useStore","createDispatchHook","useDefaultStore","dispatch","useDispatch","NavigationLoginComponent","baseHost","window","location","protocol","host","handleLogin","href","concat","handleSignUp","handleForgot","jsx","Fragment","children","jsxs","className","onClick","ScheduleComponent","_useParams","useParams","id","_useSelector","useSelector","state","users","user_email","user_id","_useSelector2","schedule","loading","scheduleError","events","start_date","start_time","event_id","event_date_time","summary","description","attendees","office_hours","communication_preferences","_useState","useState","_useState2","_slicedToArray","officeHours","setOfficeHours","_useState3","_useState4","availableDates","setAvailableDates","_useState5","_useState6","availableTimes","setAvailableTimes","_useState7","_useState8","selectedDate","setSelectedDate","_useState9","_useState10","selectedTime","setSelectedTime","_useState11","_useState12","_useState13","_useState14","setSelectedDescription","_useState15","_useState16","selectedCommunicationPreference","setCommunicationPreference","_useState17","_useState18","selectedAttendees","_useState19","_useState20","_useState21","_useState22","_useState23","_useState24","messageType","setMessageType","_useState25","_useState26","message","setMessage","dateSelectRef","useRef","timeSelectRef","summarySelectRef","descriptionSelectRef","communicationPreferenceSelectRef","attendeesSelectRef","useNavigate","useEffect","getOfficeHours","formatOfficeHours","getUser","getAvailableTimes","datesAvail","current","document","getElementById","updateDate","key","value","timesAvail","updateTime","handleDateChange","event","target","console","error","handleTimeChange","updateEvent","getCommunicationPreferences","options","updateDescription","updateCommunicationPreference","handleCommunicationPreferenceChange","updateAttendees","handleClick","sendInvites","map","hours","index","dayofweek","start","end","htmlFor","type","name","ref","onChange","defaultValue","min","Date","toISOString","split","date","time","communication"],"mappings":"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","x_google_ignoreList":[0,1]}